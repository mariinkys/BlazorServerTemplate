@inherits BasePages.BasePage

<EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit">
    <FluentValidationValidator @ref="_validator" DisableAssemblyScanning="@true"></FluentValidationValidator>
    <MudGrid>
        <MudItem xs="12" sm="12" md="6">
            <MudTextField @bind-Value="@_model.OldPassword" Disabled="!PageEditMode" Label="Contraseña Antigua" Variant="Variant.Outlined" InputType="InputType.Password" />
            <ValidationMessage For="@(() => _model.OldPassword)" />
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudTextField @bind-Value="@_model.NewPassword" Label="Nueva Contraseña" Disabled="!PageEditMode" Variant="Variant.Outlined" InputType="InputType.Password" />
            <ValidationMessage For="@(() => _model.NewPassword)" />
        </MudItem>
    </MudGrid>
    @if (PageEditMode)
    {
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Disabled="@(!context.Validate())">Guardar</MudButton>
    }
</EditForm>

@code {
    [Parameter] public int UserId { get; set; }

    [Inject] IUserManager _manager { get; set; }

    private UserUpdatePasswordCommand _model { get; set; } = new();
    private FluentValidationValidator _validator { get; set; }

    private bool PageEditMode { get; set; } = true;
    private bool IsSaving { get; set; } = false;

    protected override void OnInitialized()
    {
        try
        {
            _model.UserId = UserId;
        }
        catch (Exception ex)
        {
            ShowError(Snackbar, ex.Message);
        }

    }

    private async Task HandleValidSubmit()
    {

        try
        {
            if (!IsSaving)
            {

                IsSaving = true;
                var data = await _manager.UpdatePassword(_model);

                if (data != null && data.Succeeded)
                {
                    ShowSuccess(Snackbar, "Contraseña actualizada");
                }
                else if (!data.Succeeded)
                {
                    if (!string.IsNullOrEmpty(data.Message)) ShowWarning(Snackbar, data.Message);
                }

                IsSaving = false;
            }
        }
        catch (Exception ex)
        {
            IsSaving = false;
            ShowError(Snackbar, ex.Message);
        }
    }

}
